#!/bin/bash

: ${db_name:=state_of_politics}
: ${senate_table:=senate_districts}
: ${house_table:=house_districts}
: ${openstates_table=openstates_data}

# make -k

dropdb --if-exists --interactive $db_name
createdb --encoding='utf-8' --template=template0 $db_name
psql -c 'create extension postgis' $db_name

psql -f sql/schema.sql $db_name
for csv in data/csv/*.csv; do
  cat $csv | psql -c "copy ${openstates_table} from stdin with csv header delimiter ',' NULL E'' quote '\"'" $db_name
done

shp2pgsql -t 2D -s 4326 -i -D data/shp/alabama_house.shp $house_table | psql $db_name
psql -c "delete from $house_table" $db_name

shp2pgsql -t 2D -s 4326 -i -D data/shp/alabama_senate.shp $senate_table | psql $db_name
psql -c "delete from $senate_table" $db_name

for shp in data/shp/*_house.shp; do
  shp2pgsql -a -s 4326 -i -D $shp $house_table | psql $db_name
done

for shp in data/shp/*_senate.shp; do
  shp2pgsql -a -s 4326 -i -D $shp $senate_table | psql $db_name
done

psql -c "update ${openstates_table} set district = (select array_to_string(array_agg(i), '') from
  (select (regexp_matches(district, '[A-Z0-9]', 'g'))[1] i) t) where state = 'vt'" $db_name

psql -c "create index active_district_chamber_idx on ${openstates_table} (active, district, chamber)" $db_name
psql -c "create index active_party_idx on ${openstates_table} (active, party)" $db_name
psql -c "create index lower_idx on ${house_table} (sldlst)" $db_name
psql -c "create index upper_idx on ${senate_table} (sldust)" $db_name
